# Generated by Django 5.2 on 2025-06-30 21:10

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Filiere',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nom', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('couleur', models.CharField(max_length=7)),
                ('icone', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='GroupeDiscussion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('domaine_etude', models.CharField(choices=[('btp', 'Bâtiment & Travaux Publics'), ('info_eco_num', 'Informatique & Economie Numérique'), ('mgi', 'Mécanique et Génie industriel (MGI)'), ('communication', 'Communication'), ('energie', 'Energies Renouvelables et Efficacité Energétique'), ('agrobusiness', 'Agrobusiness et Industrie Agroalimentaire'), ('gestion', 'Gestion (Administration, Finances, Marketing, GRH, Comptabilité)'), ('sante', 'Sciences de la santé'), ('stylisme', 'Stylisme et modélisme')], max_length=50, unique=True)),
                ('nom', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_admin', models.BooleanField(default=False)),
                ('telephone', models.CharField(blank=True, max_length=20)),
                ('photo_profil', models.ImageField(blank=True, null=True, upload_to='profils/')),
                ('date_inscription', models.DateTimeField(auto_now_add=True)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Utilisateur',
                'verbose_name_plural': 'Utilisateurs',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='AnneeAcademique',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('debut', models.PositiveIntegerField()),
                ('fin', models.PositiveIntegerField()),
            ],
            options={
                'ordering': ['-debut'],
                'unique_together': {('debut', 'fin')},
            },
        ),
        migrations.CreateModel(
            name='Beneficiaire',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_cde', models.CharField(max_length=20, unique=True)),
                ('nom', models.CharField(max_length=255)),
                ('prenom', models.CharField(max_length=255)),
                ('numero_beneficiaire', models.CharField(max_length=9, unique=True)),
                ('date_naissance', models.DateField(null=True)),
                ('adresse', models.TextField(blank=True)),
                ('sexe', models.CharField(choices=[('F', 'Féminin'), ('M', 'Masculin')], max_length=20)),
                ('utilisateur', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Masterclasse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('image', models.ImageField(blank=True, null=True, upload_to='masterclasses/ressources')),
                ('url_video', models.URLField()),
                ('duree', models.PositiveIntegerField(help_text='Durée en minutes')),
                ('date_publication', models.DateTimeField(auto_now_add=True)),
                ('est_active', models.BooleanField(default=True)),
                ('ressources', models.FileField(blank=True, upload_to='masterclasses/ressources/')),
                ('filieres', models.ManyToManyField(to='nehemiah_app.filiere')),
            ],
        ),
        migrations.CreateModel(
            name='Message',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sujet', models.CharField(blank=True, max_length=200)),
                ('contenu', models.TextField()),
                ('date_envoi', models.DateTimeField(auto_now_add=True)),
                ('lu', models.BooleanField(default=False)),
                ('destinataire', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='messages_recus', to=settings.AUTH_USER_MODEL)),
                ('expediteur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='messages_envoyes', to=settings.AUTH_USER_MODEL)),
                ('groupe', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='nehemiah_app.groupediscussion')),
            ],
        ),
        migrations.CreateModel(
            name='Notification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type_notification', models.CharField(choices=[('rapport', 'Rapport de lecture'), ('masterclasse', 'Masterclasse'), ('reinscription', 'Réinscription'), ('message', 'Message')], max_length=20)),
                ('titre', models.CharField(max_length=200)),
                ('message', models.TextField()),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('lue', models.BooleanField(default=False)),
                ('url_liee', models.URLField(blank=True)),
                ('utilisateur', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProgressionMasterclasse',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_debut', models.DateTimeField(auto_now_add=True)),
                ('date_completion', models.DateTimeField(blank=True, null=True)),
                ('est_terminee', models.BooleanField(default=False)),
                ('progression', models.PositiveIntegerField(default=0)),
                ('etudiant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('masterclasse', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='nehemiah_app.masterclasse')),
            ],
        ),
        migrations.CreateModel(
            name='RapportLecture',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('titre_livre', models.CharField(max_length=200)),
                ('auteur', models.CharField(max_length=200)),
                ('resume', models.TextField()),
                ('apprentissages_cles', models.TextField()),
                ('date_soumission', models.DateTimeField(auto_now_add=True)),
                ('statut', models.CharField(choices=[('soumis', 'Soumis'), ('en_revue', 'En revue'), ('a_reviser', 'À réviser'), ('valide', 'Validé'), ('rejete', 'Rejeté')], default='soumis', max_length=20)),
                ('fichier', models.FileField(blank=True, upload_to='rapports/')),
                ('commentaires_mentor', models.TextField(blank=True)),
                ('date_evaluation', models.DateTimeField(blank=True, null=True)),
                ('etudiant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Reinscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_soumission', models.DateTimeField(auto_now_add=True)),
                ('statut', models.CharField(choices=[('en_attente', 'En attente de validation'), ('selectionne', 'Sélectionné'), ('non_selectionne', 'Non sélectionné')], default='en_attente', max_length=20)),
                ('domaine_etude', models.CharField(choices=[('btp', 'Bâtiment & Travaux Publics'), ('info_eco_num', 'Informatique & Economie Numérique'), ('mgi', 'Mécanique et Génie industriel (MGI)'), ('communication', 'Communication'), ('energie', 'Energies Renouvelables et Efficacité Energétique'), ('agrobusiness', 'Agrobusiness et Industrie Agroalimentaire'), ('gestion', 'Gestion (Administration, Finances, Marketing, GRH, Comptabilité)'), ('sante', 'Sciences de la santé'), ('stylisme', 'Stylisme et modélisme')], max_length=50, verbose_name="Domaine d'étude")),
                ('niveau_scolaire', models.CharField(choices=[('bt', 'BT'), ('bac2', 'BAC 2'), ('bts', 'BTS'), ('licence', 'Licence'), ('semestre1_2', 'Semestre 1 et 2'), ('semestre3_4', 'Semestre 3 et 4'), ('semestre5_6', 'Semestre 5 et 6'), ('semestre7', 'Semestre 7')], max_length=20)),
                ('annee_obtention_diplome', models.PositiveIntegerField()),
                ('moyenne_obtenue', models.DecimalField(decimal_places=2, max_digits=4)),
                ('specialite', models.CharField(max_length=100)),
                ('universite', models.CharField(max_length=100)),
                ('commune_residence', models.CharField(max_length=100)),
                ('ville_residence', models.CharField(max_length=100)),
                ('quartier_residence', models.CharField(max_length=100)),
                ('besoin_logement', models.BooleanField(default=False)),
                ('montant_loyer_annuel', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('frais_scolarite', models.DecimalField(decimal_places=2, max_digits=10)),
                ('besoin_ordinateur', models.DecimalField(decimal_places=2, default=0, max_digits=10)),
                ('frais_transport', models.DecimalField(decimal_places=2, max_digits=10)),
                ('frais_assurance', models.DecimalField(decimal_places=2, default=50000, max_digits=10)),
                ('motif_demande', models.TextField()),
                ('nationalite', models.CharField(blank=True, max_length=100, null=True)),
                ('releve_note_precedent', models.FileField(blank=True, null=True, upload_to='reinscription/releves/')),
                ('rapport_stage', models.FileField(blank=True, null=True, upload_to='reinscription/rapports/')),
                ('lettre_recommandation', models.FileField(blank=True, null=True, upload_to='reinscription/recommandations/')),
                ('copie_diplome', models.FileField(blank=True, null=True, upload_to='reinscription/diplomes/')),
                ('copie_nationalite', models.FileField(blank=True, null=True, upload_to='reinscription/nationalites/')),
                ('annee_academique', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='nehemiah_app.anneeacademique')),
                ('etudiant', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('masterclasses_suivies', models.ManyToManyField(blank=True, to='nehemiah_app.masterclasse')),
            ],
            options={
                'verbose_name': 'Demande de réinscription',
                'verbose_name_plural': 'Demandes de réinscription',
                'unique_together': {('etudiant', 'annee_academique')},
            },
        ),
    ]
